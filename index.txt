
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fridge Inventory Tracker</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <script src="https://unpkg.com/lucide-react@latest/dist/umd/lucide-react.js"></script>
    
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-database-compat.js"></script>
    
    <style>
        /* Hide scrollbar for Chrome, Safari and Opera */
        .scrollbar-hide::-webkit-scrollbar {
            display: none;
        }
        /* Hide scrollbar for IE, Edge and Firefox */
        .scrollbar-hide {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyCpbaIxV6nDIose-RdRYeC-3-eH-oIsaRA", // Reminder: Secure your Firebase with Security Rules
            authDomain: "fridge-tracker-home.firebaseapp.com",
            databaseURL: "https://fridge-tracker-home-default-rtdb.firebaseio.com",
            projectId: "fridge-tracker-home",
            storageBucket: "fridge-tracker-home.firebasestorage.app",
            messagingSenderId: "580588734189",
            appId: "1:580588734189:web:c8c0c03a0fcc509707aee4"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        const { useState, useEffect } = React;
        
        // Lucide icons setup - MODIFIED TO USE LucideReact
        const { Plus, Minus, Search, AlertCircle, Clock, Package, Cloud, CloudOff } = LucideReact; 

        const FridgeInventory = () => {
            const [currentUser, setCurrentUser] = useState('');
            const [showUserModal, setShowUserModal] = useState(true);
            const [items, setItems] = useState([]);
            const [searchTerm, setSearchTerm] = useState('');
            const [selectedCategory, setSelectedCategory] = useState('All');
            const [showAddForm, setShowAddForm] = useState(false);
            const [loading, setLoading] = useState(true); // Start with loading true
            const [connected, setConnected] = useState(true);
            const [newItem, setNewItem] = useState({
                name: '',
                quantity: 1,
                unit: 'pieces',
                category: 'Produce',
                expirationDate: '',
                lowStockThreshold: 1
            });

            const categories = ['All', 'Dairy', 'Produce', 'Beverages', 'Frozen', 'Pantry', 'Condiments', 'Leftovers'];
            const units = ['pieces', 'kg', 'g', 'litres', 'mL', 'cups', 'bottles', 'cans', 'servings', 'slices', 'carton', 'bags', 'bunches'];

            // Check for saved username
            useEffect(() => {
                const savedUser = localStorage.getItem('fridgeTrackerUser');
                if (savedUser) {
                    setCurrentUser(savedUser);
                    setShowUserModal(false);
                    // setLoading(true) will be handled by the Firebase listener useEffect
                } else {
                    // If no user, we are not loading Firebase data yet, so set loading to false to show modal.
                    setLoading(false); 
                }
            }, []);

            // Set up Firebase listeners
            useEffect(() => {
                // Only run if a user is set (i.e., modal is not shown)
                if (!showUserModal && currentUser) {
                    setLoading(true); // Set loading to true when we start fetching data for a user

                    // Connection state listener
                    const connectedRef = database.ref('.info/connected');
                    const connectionListener = connectedRef.on('value', (snap) => {
                        setConnected(snap.val() === true);
                    });

                    // Items listener
                    const itemsRef = database.ref('items'); // Assuming items are global, not per-user for simplicity
                                                            // If per-user, path would be `users/${currentUser}/items` or similar
                    const itemsListener = itemsRef.on('value', (snapshot) => {
                        const data = snapshot.val();
                        if (data) {
                            const itemsList = Object.entries(data).map(([key, value]) => ({
                                ...value,
                                id: key
                            }));
                            setItems(itemsList);
                        } else {
                            setItems([]);
                            // Initialize with sample data if empty and if this is the intended behavior
                            // This might run for every new user if the DB is empty. Consider if this is desired.
                            const sampleItems = [
                                {
                                    name: 'Orange Juice',
                                    quantity: 2,
                                    unit: 'litres',
                                    category: 'Beverages',
                                    expirationDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                                    lowStockThreshold: 1,
                                    lastUpdatedBy: 'System',
                                    lastUpdated: new Date().toISOString()
                                },
                                {
                                    name: 'Milk',
                                    quantity: 1,
                                    unit: 'litres',
                                    category: 'Dairy',
                                    expirationDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                                    lowStockThreshold: 1,
                                    lastUpdatedBy: 'System',
                                    lastUpdated: new Date().toISOString()
                                }
                            ];
                            // Commenting out automatic sample data push to avoid unintended writes on every empty load.
                            // You can re-enable if this is a specific requirement for first-time setup for any user.
                            /*
                            sampleItems.forEach(item => {
                                database.ref('items').push(item);
                            });
                            */
                        }
                        setLoading(false); // Data loaded or confirmed empty
                    });

                    return () => {
                        connectedRef.off('value', connectionListener);
                        itemsRef.off('value', itemsListener);
                    };
                } else if (!currentUser && !showUserModal) {
                    // User logged out, clear items and stop loading
                    setItems([]);
                    setLoading(false);
                }
            }, [showUserModal, currentUser]); // Depend on currentUser as well

            const handleUserSubmit = () => {
                if (currentUser.trim()) {
                    localStorage.setItem('fridgeTrackerUser', currentUser.trim());
                    setShowUserModal(false);
                    // currentUser state is already set by input field
                }
            };

            const handleLogout = () => {
                localStorage.removeItem('fridgeTrackerUser');
                setCurrentUser('');
                setShowUserModal(true);
                setItems([]); // Clear items on logout
                setLoading(false); // No longer loading data for a user
            };


            const updateQuantity = async (id, delta) => {
                const item = items.find(item => item.id === id);
                if (item) {
                    const newQuantity = Math.max(0, parseFloat((item.quantity + delta).toFixed(2))); // handle potential floating point issues
                    database.ref(`items/${id}`).update({
                        quantity: newQuantity,
                        lastUpdatedBy: currentUser,
                        lastUpdated: new Date().toISOString()
                    });
                }
            };

            const addItem = async () => {
                if (newItem.name && newItem.expirationDate) {
                    const itemToAdd = {
                        ...newItem,
                        quantity: parseFloat(newItem.quantity) || 0,
                        lowStockThreshold: parseFloat(newItem.lowStockThreshold) || 0,
                        lastUpdatedBy: currentUser,
                        lastUpdated: new Date().toISOString()
                    };
                    database.ref('items').push(itemToAdd);
                    setNewItem({
                        name: '',
                        quantity: 1,
                        unit: 'pieces',
                        category: 'Produce',
                        expirationDate: '',
                        lowStockThreshold: 1
                    });
                    setShowAddForm(false);
                }
            };

            const deleteItem = async (id) => {
                 if(confirm(`Are you sure you want to remove this item?`)) {
                    database.ref(`items/${id}`).remove();
                 }
            };

            const getDaysUntilExpiration = (expirationDate) => {
                if (!expirationDate) return Infinity; // Handle cases where date might be missing
                const today = new Date();
                const expDate = new Date(expirationDate);
                today.setHours(0, 0, 0, 0); // Compare date part only
                expDate.setHours(0, 0, 0, 0);
                const diffTime = expDate - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                return diffDays;
            };

            const getExpirationClass = (expirationDate) => {
                const days = getDaysUntilExpiration(expirationDate);
                if (days <= 0) return 'bg-red-100 border-red-400';
                if (days <= 3) return 'bg-yellow-100 border-yellow-400';
                return 'bg-white border-gray-300';
            };

            const isLowStock = (item) => {
                return item.quantity > 0 && item.quantity <= item.lowStockThreshold;
            };
            
            const isOutOfStock = (item) => {
                return item.quantity <= 0;
            }

            const filteredItems = items.filter(item => {
                const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase());
                const matchesCategory = selectedCategory === 'All' || item.category === selectedCategory;
                return matchesSearch && matchesCategory;
            }).sort((a,b) => getDaysUntilExpiration(a.expirationDate) - getDaysUntilExpiration(b.expirationDate));


            const getStats = () => {
                const lowStockCount = items.filter(isLowStock).length;
                const expiringSoonCount = items.filter(item => {
                    const days = getDaysUntilExpiration(item.expirationDate);
                    return days >= 0 && days <= 3; // Expiring today or in next 3 days
                }).length;
                const totalItems = items.length;
                return { total: totalItems, lowStock: lowStockCount, expiringSoon: expiringSoonCount };
            };

            const stats = getStats();

            if (showUserModal) {
                return (
                    <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center p-4 z-30">
                        <div className="bg-white rounded-lg p-6 shadow-xl max-w-sm w-full">
                            <h2 className="text-2xl font-bold mb-4 text-center text-gray-700">Welcome to Fridge Tracker</h2>
                            <div>
                                <input
                                    type="text"
                                    placeholder="Enter your name"
                                    className="w-full p-3 border border-gray-300 rounded-lg mb-4 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    value={currentUser}
                                    onChange={(e) => setCurrentUser(e.target.value)}
                                    onKeyPress={(e) => e.key === 'Enter' && handleUserSubmit()}
                                    autoFocus
                                />
                                <button
                                    onClick={handleUserSubmit}
                                    disabled={!currentUser.trim()}
                                    className="w-full bg-blue-500 text-white p-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors disabled:bg-gray-300"
                                >
                                    Start Tracking
                                </button>
                            </div>
                        </div>
                    </div>
                );
            }

            if (loading) {
                return (
                    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
                        <div className="text-center">
                            <div role="status" className="flex flex-col items-center">
                                <svg aria-hidden="true" className="w-10 h-10 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0492C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5424 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                                </svg>
                                <p className="text-gray-600 mt-3">Loading your fridge items...</p>
                            </div>
                        </div>
                    </div>
                );
            }

            return (
                <div className="min-h-screen bg-gray-100">
                    {/* Header Section */}
                    <div className="bg-white shadow-md sticky top-0 z-20">
                        <div className="p-4 max-w-4xl mx-auto">
                            <div className="flex justify-between items-center mb-4">
                                <h1 className="text-3xl font-bold text-gray-700">Fridge Inventory</h1>
                                <div className="text-right">
                                    <div className="text-sm text-gray-600 flex items-center gap-2 justify-end">
                                        {connected ? (
                                            <Cloud className="w-5 h-5 text-green-500" />
                                        ) : (
                                            <CloudOff className="w-5 h-5 text-red-500" />
                                        )}
                                        <span>User: <span className="font-semibold">{currentUser}</span></span>
                                    </div>
                                    <button 
                                        onClick={handleLogout}
                                        className="text-xs text-blue-600 hover:underline hover:text-blue-800 transition-colors"
                                    >
                                        Change User
                                    </button>
                                </div>
                            </div>

                            {!connected && (
                                <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4 text-center">
                                    <p className="text-sm text-red-800 font-medium">
                                        <AlertCircle className="w-4 h-4 inline mr-1 mb-0.5" />
                                        <strong>Offline:</strong> Your changes will sync when connection is restored.
                                    </p>
                                </div>
                            )}
                            
                            {/* Stats Cards */}
                            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
                                <div className="bg-blue-500 text-white p-4 rounded-lg shadow-lg text-center">
                                    <Package className="w-7 h-7 mx-auto mb-2" />
                                    <div className="text-2xl font-bold">{stats.total}</div>
                                    <div className="text-sm">Total Items</div>
                                </div>
                                <div className="bg-yellow-500 text-white p-4 rounded-lg shadow-lg text-center">
                                    <AlertCircle className="w-7 h-7 mx-auto mb-2" />
                                    <div className="text-2xl font-bold">{stats.lowStock}</div>
                                    <div className="text-sm">Low Stock</div>
                                </div>
                                <div className="bg-red-500 text-white p-4 rounded-lg shadow-lg text-center">
                                    <Clock className="w-7 h-7 mx-auto mb-2" />
                                    <div className="text-2xl font-bold">{stats.expiringSoon}</div>
                                    <div className="text-sm">Expiring Soon (≤3 days)</div>
                                </div>
                            </div>

                            {/* Controls: Search and Add Button */}
                            <div className="flex flex-col sm:flex-row gap-3 mb-4">
                                <div className="relative flex-grow">
                                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                                    <input
                                        type="text"
                                        placeholder="Search items by name..."
                                        className="w-full pl-10 pr-3 py-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-shadow"
                                        value={searchTerm}
                                        onChange={(e) => setSearchTerm(e.target.value)}
                                    />
                                </div>
                                <button
                                    onClick={() => setShowAddForm(true)}
                                    className="bg-green-500 text-white px-5 py-2.5 rounded-lg flex items-center justify-center gap-2 hover:bg-green-600 transition-colors shadow hover:shadow-md font-semibold"
                                >
                                    <Plus className="w-5 h-5" />
                                    Add New Item
                                </button>
                            </div>

                            {/* Category Filters */}
                            <div className="flex gap-2 overflow-x-auto pb-3 scrollbar-hide mb-2">
                                {categories.map(cat => (
                                    <button
                                        key={cat}
                                        onClick={() => setSelectedCategory(cat)}
                                        className={`px-4 py-1.5 rounded-full text-sm font-medium whitespace-nowrap transition-all
                                            ${selectedCategory === cat
                                                ? 'bg-blue-600 text-white shadow-md'
                                                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                        }`}
                                    >
                                        {cat}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Main Content Area for Items */}
                    <div className="p-4 max-w-4xl mx-auto">
                        {filteredItems.length === 0 ? (
                            <div className="text-center py-10 text-gray-500">
                                <Package className="w-16 h-16 mx-auto mb-4 text-gray-300" />
                                <p className="text-xl font-semibold">No items found.</p>
                                {items.length > 0 && <p className="text-sm mt-1">Try adjusting your search or category filter.</p>}
                                {items.length === 0 && searchTerm === '' && selectedCategory === 'All' && (
                                    <p className="text-sm mt-1">Your fridge is empty! Click "Add New Item" to get started.</p>
                                )}
                            </div>
                        ) : (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                {filteredItems.map(item => {
                                    const daysUntilExpiration = getDaysUntilExpiration(item.expirationDate);
                                    const itemLowStock = isLowStock(item);
                                    const itemOutOfStock = isOutOfStock(item);
                                    
                                    let expirationText = '';
                                    let expirationColorClass = 'text-gray-700';

                                    if (daysUntilExpiration < 0) {
                                        expirationText = `Expired ${Math.abs(daysUntilExpiration)} day(s) ago`;
                                        expirationColorClass = 'text-red-600 font-bold';
                                    } else if (daysUntilExpiration === 0) {
                                        expirationText = 'Expires Today';
                                        expirationColorClass = 'text-red-600 font-semibold';
                                    } else if (daysUntilExpiration <= 3) {
                                        expirationText = `Expires in ${daysUntilExpiration} day(s)`;
                                        expirationColorClass = 'text-yellow-600 font-semibold';
                                    } else {
                                        expirationText = `Expires in ${daysUntilExpiration} day(s)`;
                                    }

                                    return (
                                        <div
                                            key={item.id}
                                            className={`p-5 rounded-lg border ${getExpirationClass(item.expirationDate)} shadow-lg transition-all hover:shadow-xl flex flex-col justify-between`}
                                        >
                                            <div>
                                                <div className="flex justify-between items-start mb-2">
                                                    <div className="flex-1">
                                                        <h3 className="font-bold text-xl text-gray-800">{item.name}</h3>
                                                        <p className="text-xs text-gray-500 mb-1">
                                                            Category: {item.category}
                                                        </p>
                                                        <p className={`text-sm font-medium ${expirationColorClass}`}>
                                                            <Clock className="w-4 h-4 inline mr-1 mb-0.5" />{expirationText}
                                                        </p>
                                                    </div>
                                                    <button
                                                        onClick={() => deleteItem(item.id)}
                                                        className="text-red-500 hover:text-red-700 transition-colors p-1 -mr-1 -mt-1"
                                                        title="Remove item"
                                                    >
                                                        <Minus className="w-5 h-5" /> {/* Using Minus for delete icon, consider Trash2 from lucide-react */}
                                                    </button>
                                                </div>

                                                <div className="flex items-center justify-between my-4">
                                                    <button
                                                        onClick={() => updateQuantity(item.id, -1)}
                                                        disabled={itemOutOfStock}
                                                        className="bg-gray-200 p-2.5 rounded-full hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                                                        title="Decrease quantity"
                                                    >
                                                        <Minus className="w-5 h-5 text-gray-700" />
                                                    </button>
                                                    <div className="text-center">
                                                        <div className="text-2xl font-bold text-gray-800">
                                                            {item.quantity} <span className="text-lg font-normal text-gray-600">{item.unit}</span>
                                                        </div>
                                                        {itemLowStock && !itemOutOfStock && (
                                                            <div className="text-xs text-yellow-600 font-semibold mt-1">Low Stock! (Alert: ≤{item.lowStockThreshold})</div>
                                                        )}
                                                        {itemOutOfStock && (
                                                            <div className="text-xs text-red-600 font-semibold mt-1">Out of Stock!</div>
                                                        )}
                                                    </div>
                                                    <button
                                                        onClick={() => updateQuantity(item.id, 1)}
                                                        className="bg-gray-200 p-2.5 rounded-full hover:bg-gray-300 transition-colors"
                                                        title="Increase quantity"
                                                    >
                                                        <Plus className="w-5 h-5 text-gray-700" />
                                                    </button>
                                                </div>
                                            </div>

                                            <div className="mt-auto pt-3 border-t border-gray-200">
                                                 <p className="text-xs text-gray-500 italic text-center">
                                                    Last updated by: {item.lastUpdatedBy} on {new Date(item.lastUpdated).toLocaleDateString()}
                                                </p>
                                            </div>
                                        </div>
                                    );
                                })
                            }
                            </div>
                        )}
                    </div>

                    {/* Add/Edit Item Modal */}
                    {showAddForm && (
                        <div className="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center p-4 z-30">
                            <div className="bg-white rounded-lg p-6 shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto scrollbar-hide">
                                <h2 className="text-2xl font-bold mb-6 text-gray-700">Add New Fridge Item</h2>
                                <div>
                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Item Name*</label>
                                        <input
                                            type="text"
                                            required
                                            className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            value={newItem.name}
                                            onChange={(e) => setNewItem({...newItem, name: e.target.value})}
                                        />
                                    </div>

                                    <div className="grid grid-cols-2 gap-4 mb-4">
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Quantity</label>
                                            <input
                                                type="number"
                                                min="0"
                                                step="any"
                                                className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                value={newItem.quantity}
                                                onChange={(e) => setNewItem({...newItem, quantity: e.target.value})}
                                            />
                                        </div>
                                        <div>
                                            <label className="block text-sm font-medium text-gray-700 mb-1">Unit</label>
                                            <select
                                                className="w-full p-2.5 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                                value={newItem.unit}
                                                onChange={(e) => setNewItem({...newItem, unit: e.target.value})}
                                            >
                                                {units.map(unit => (
                                                    <option key={unit} value={unit}>{unit}</option>
                                                ))}
                                            </select>
                                        </div>
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                                        <select
                                            className="w-full p-2.5 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            value={newItem.category}
                                            onChange={(e) => setNewItem({...newItem, category: e.target.value})}
                                        >
                                            {categories.filter(cat => cat !== 'All').map(cat => (
                                                <option key={cat} value={cat}>{cat}</option>
                                            ))}
                                        </select>
                                    </div>

                                    <div className="mb-4">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Expiration Date*</label>
                                        <input
                                            type="date"
                                            required
                                            className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            value={newItem.expirationDate}
                                            min={new Date().toISOString().split('T')[0]}
                                            onChange={(e) => setNewItem({...newItem, expirationDate: e.target.value})}
                                        />
                                    </div>

                                    <div className="mb-5">
                                        <label className="block text-sm font-medium text-gray-700 mb-1">Low Stock Alert (Qty)</label>
                                        <input
                                            type="number"
                                            min="0"
                                            step="any"
                                            className="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            value={newItem.lowStockThreshold}
                                            onChange={(e) => setNewItem({...newItem, lowStockThreshold: e.target.value})}
                                        />
                                    </div>

                                    <div className="flex gap-3 pt-1">
                                        <button
                                            onClick={addItem}
                                            disabled={!newItem.name.trim() || !newItem.expirationDate}
                                            className="flex-1 bg-blue-500 text-white p-3 rounded-lg font-semibold hover:bg-blue-600 transition-colors disabled:bg-gray-300"
                                        >
                                            Add Item
                                        </button>
                                        <button
                                            onClick={() => setShowAddForm(false)}
                                            className="flex-1 bg-gray-200 text-gray-700 p-3 rounded-lg font-semibold hover:bg-gray-300 transition-colors"
                                        >
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            );
        };

        // Mount the app
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<FridgeInventory />);
    </script>
</body>
</html>
